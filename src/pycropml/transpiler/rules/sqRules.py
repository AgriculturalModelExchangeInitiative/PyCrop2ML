from pycropml.transpiler.rules.generalRule import GeneralRule
from pycropml.transpiler.pseudo_tree import Node


class SqRules(GeneralRule):
    
    def __init__(self):
        GeneralRule.__init__(self)

    header= '''------------------------------------------------------------------------------
<auto-generated>
//     Ce code a été généré par un outil Cyml Translator.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

/// 
/// This class was created from file %s
/// The tool used was: DCC - Domain Class Coder, http://components.biomamodelling.org/, DCC
/// 
/// Author: %s
/// mail
/// Institution: %s
/// 
/// 
/// Hour: %s
/// 
/// 
''' 

    def field_decl(self, node):
        return "private %s _%s;"


    namespace={
        "headNamespace" : 
        '''
namespace SiriusQualityEnergyBalance
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using CRA.ModelLayer.Core;
    using CRA.ModelLayer.ParametersManagement;
    
    
    /// <summary>%sState Domain class contains the accessors to values</summary>
    [Serializable()]
    public class %sState : ICloneable, IDomainClass
    {

        '''

    }
    methods = {
            
            'int':{
                    'float':'REAL'                    
                    },
            'float':{
                    'int':'INT'
                    },
            'str':{
                    'int':'INT',
                    'find':lambda node: Node("custom_call",receiver = node.receiver, function="index", args=node.args, pseudo_type=node.pseudo_type)
                    },
            'list':{
                    'len':'SIZE',
                    'sum':'sum',
                    'append':lambda node: Node("custom_call",receiver = node.receiver, function="call Add", args=node.args, pseudo_type=node.pseudo_type)          
                    },
            'dict':{
                    'len':'SIZE'
                    }
            }
    def method(self):
        pass

    