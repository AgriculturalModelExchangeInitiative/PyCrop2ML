<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ModelUnit PUBLIC "-//SIMPLACE/DTD SOL 1.0//EN" "https://raw.githubusercontent.com/AgriculturalModelExchangeInitiative/xml_representation/master/ModelUnit.dtd">
 <ModelUnit modelid="1" timestep="1" name="LintulPhenology" version="1.0">
    <Description>
      <Title>LintulPhenology</Title>
      <Authors>Gunther Krauss, gk@uni-bonn.de</Authors>
      <Institution>INRES Pflanzenbau, Uni Bonn</Institution>
      <Reference>as given in the documentation in SIMPLACE</Reference>
      <Abstract>see documentation at http://www.simplace.net/doc/simplace_modules/class_net.simplace.sim.components.models.lintul.LintulPhenology.html</Abstract>
    </Description>
    <Inputs>
      <Input name="iDoSow" description="true at the day of sowing" datatype="BOOLEAN" default="False" unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Input name="cAirTemperatureSumMilkripeness" description="Temperature sum when milk ripeness of plant is reached" datatype="DOUBLE" min="0.0" max="7000.0" default="0" unit="http://www.wurvoc.org/vocabularies/om-1.8/degree_Celsius_day" />
      <Input name="cAirTemperatureSumAnthesis" description="Temperature sum after energence when anthesis of plant is reached" datatype="DOUBLE" min="0.0" max="5000.0" default="650.0" unit="http://www.wurvoc.org/vocabularies/om-1.8/degree_Celsius_day" />
      <Input name="iDoHarvest" description="true at the day of harvest" datatype="BOOLEAN" default="False" unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Input name="cAirTemperatureSumMaturity" description="Temperature sum after emergency when maturity of plant is reached" datatype="DOUBLE" min="0.0" max="10000.0" default="1350.0" unit="http://www.wurvoc.org/vocabularies/om-1.8/degree_Celsius_day" />
      <Input name="cRelativeDayOfEmergence" description="Days between sowing and emergence" datatype="INT" min="0" max="366" default="11" unit="http://www.wurvoc.org/vocabularies/om-1.8/day" />
      <Input name="iRTEFFAnt" description="Daily effective temperature before anthesis" datatype="DOUBLE" min="0.0" max="40.0" default="0.0" unit="http://www.wurvoc.org/vocabularies/om-1.8/degree_Celsius" />
      <Input name="iRTEFFMat" description="Daily effective temperature after anthesis" datatype="DOUBLE" min="0.0" max="40.0" default="0.0" unit="http://www.wurvoc.org/vocabularies/om-1.8/degree_Celsius" />
    </Inputs>
    <Outputs>
      <Output name="MilkripenessDate" description="Date of Milkripeness" datatype="DATE" unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="EmergenceDOY" description="DOY of Emergence" datatype="INT"  unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="SowingDOY" description="DOY of Sowing" datatype="INT" unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="EmergenceDate" description="Date of Emergence" datatype="DATE" unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="rDevStageRate" description="increment of the dev stage" datatype="DOUBLE" min="0.0"  unit="http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_day" />
      <Output name="IsEmergence" description="true at the emergence date" datatype="BOOLEAN"  unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="SowingDate" description="Date of Sowing" datatype="DATE" unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="MaturityDate" description="Date of Maturity" datatype="DATE" unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="sTSUM" description="Temperature sum as accumulated effective temperature after emergence" datatype="DOUBLE" min="0.0" max="10000.0"  unit="http://www.wurvoc.org/vocabularies/om-1.8/degree_Celsius_day" />
      <Output name="IsMilkripeness" description="true at the milkripeness date" datatype="BOOLEAN"  unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="RTEFF" description="Daily effective temperature used to calculate the temperature sum and development stage at a given day" datatype="DOUBLE" min="0.0" max="40.0"  unit="http://www.wurvoc.org/vocabularies/om-1.8/degree_Celsius" />
      <Output name="MaturityDOY" description="DOY of Maturity" datatype="INT"  unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="IsMaturity" description="true at the maturity date" datatype="BOOLEAN"  unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="MilkripenessDOY" description="DOY of Milkripeness" datatype="INT"  unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="IsSowing" description="true at the sowing date" datatype="BOOLEAN" unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="IsPhenologyEvent" description="true if either sowing/emergence/anthesis/maturity date occured" datatype="BOOLEAN"  unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="AnthesisDate" description="Date of Anthesis" datatype="DATE" unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="sDevStage" description="Development stage of the crop (1.0=anthesis, 2.0=physiological maturity" datatype="DOUBLE" min="0.0"  unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="CropCycleCount" description="Number of growth periods, starting with 0 and incremented on harvest. Used for crop rotation." datatype="INT" min="0" max="100" unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="AnthesisDOY" description="DOY of Anthesis" datatype="INT"  unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
      <Output name="IsAnthesis" description="true at the anthesis date" datatype="BOOLEAN" unit="http://www.wurvoc.org/vocabularies/om-1.8/one" />
    </Outputs>
    <Algorithm language="java" platform="SIMPLACE" ><![CDATA[

    LocalDateTime tCurrentDate = (LocalDateTime) getVariable(FWSimVarMap.CURRENT_DATE).getValue();
    Integer tCurrentDOY = (Integer) getVariable(FWSimVarMap.CURRENT_DOY).getValue();
    IsSowing.setValue(false, this);
    IsEmergence.setValue(false, this);
    IsAnthesis.setValue(false, this);
    IsMilkripeness.setValue(false, this);
    IsMaturity.setValue(false, this);
    if (sDevStage.getValue() &gt; 0 &amp;&amp; iDoHarvest.getValue()) {
        resetStates();
        CropCycleCount.setValue((Integer) CropCycleCount.getValue() + 1, this);
    } else if (iDoSow.getValue()) {
        resetStates();
        EmergenceDOY.setDefaultValue();
        AnthesisDOY.setDefaultValue();
        MilkripenessDOY.setDefaultValue();
        MaturityDOY.setDefaultValue();
        SowingDate.setValue(tCurrentDate, this);
        SowingDOY.setValue(tCurrentDOY, this);
        IsSowing.setValue(true, this);
    } else if (SowingDate.getValue() != null) {
        if (EmergenceDate.getValue() == null &amp;&amp; (SowingDate.getValue().isBefore(tCurrentDate) || SowingDate.getValue().isEqual(tCurrentDate))) {
            sDevStage.setValue(0.0001, this);
        }
        if (AnthesisDate.getValue() == null) {
            sTSUM.setValue(sTSUM.getValue() + iRTEFFAnt.getValue(), this);
            RTEFF.setValue(iRTEFFAnt.getValue(), this);
            double devstagebefore = sDevStage.getValue();
            sDevStage.setValue(max(sTSUM.getValue() / cAirTemperatureSumAnthesis.getValue(), sDevStage.getValue()), this);
            rDevStageRate.setValue(sDevStage.getValue() - devstagebefore, this);
        } else {
            sTSUM.setValue(sTSUM.getValue() + iRTEFFMat.getValue(), this);
            RTEFF.setValue(iRTEFFMat.getValue(), this);
            sDevStage.setValue(1 + (sTSUM.getValue() - cAirTemperatureSumAnthesis.getValue()) / (cAirTemperatureSumMaturity.getValue() - cAirTemperatureSumAnthesis.getValue()), this);
            rDevStageRate.setValue(RTEFF.getValue() / (cAirTemperatureSumMaturity.getValue() - cAirTemperatureSumAnthesis.getValue()), this);
        }
        if (EmergenceDate.getValue() == null &amp;&amp; (SowingDate.getValue().plusDays(cRelativeDayOfEmergence.getValue()).isBefore(tCurrentDate) || SowingDate.getValue().plusDays(cRelativeDayOfEmergence.getValue()).isEqual(tCurrentDate))) {
            EmergenceDate.setValue(tCurrentDate, this);
            EmergenceDOY.setValue(tCurrentDOY, this);
            IsEmergence.setValue(true, this);
        }
        if (AnthesisDate.getValue() == null &amp;&amp; sTSUM.getValue() &gt;= cAirTemperatureSumAnthesis.getValue()) {
            AnthesisDate.setValue(tCurrentDate, this);
            AnthesisDOY.setValue(tCurrentDOY, this);
            IsAnthesis.setValue(true, this);
        }
        if (MilkripenessDate.getValue() == null &amp;&amp; cAirTemperatureSumMilkripeness.getValue() != null &amp;&amp; sTSUM.getValue() &gt;= cAirTemperatureSumMilkripeness.getValue()) {
            MilkripenessDate.setValue(tCurrentDate, this);
            MilkripenessDOY.setValue(tCurrentDOY, this);
            IsMilkripeness.setValue(true, this);
        }
        if (MaturityDate.getValue() == null &amp;&amp; sTSUM.getValue() &gt;= cAirTemperatureSumMaturity.getValue()) {
            MaturityDate.setValue(tCurrentDate, this);
            MaturityDOY.setValue(tCurrentDOY, this);
            IsMaturity.setValue(true, this);
        }
    }
    IsPhenologyEvent.setValue(IsSowing.getValue() || IsEmergence.getValue() || IsAnthesis.getValue() || IsMilkripeness.getValue() || IsMaturity.getValue(), this);

    ]]>
    
    </Algorithm>
    
    <Algorithm language="python_ext" platform="" ><![CDATA[
    
	MilkripenessDate=1
      EmergenceDOY=1
     SowingDOY=1
     EmergenceDate=1
     rDevStageRate=1
     IsEmergence=False
     SowingDate =1
     MaturityDate=1
     sTSUM =1
     IsMilkripeness=False
      RTEFF=1
      MaturityDOY=1
      IsMaturity=False
      MilkripenessDOY=1
      IsSowing=False
      IsPhenologyEvent=False
      AnthesisDate=1
      sDevStage=1
      CropCycleCount=1
      AnthesisDO=1
      IsAnthesis=False
    
    """
    
    LocalDateTime tCurrentDate = (LocalDateTime) getVariable(FWSimVarMap.CURRENT_DATE).getValue();
    Integer tCurrentDOY = (Integer) getVariable(FWSimVarMap.CURRENT_DOY).getValue();
    IsSowing.setValue(false, this);
    IsEmergence.setValue(false, this);
    IsAnthesis.setValue(false, this);
    IsMilkripeness.setValue(false, this);
    IsMaturity.setValue(false, this);
    if (sDevStage.getValue() &gt; 0 &amp;&amp; iDoHarvest.getValue()) {
        resetStates();
        CropCycleCount.setValue((Integer) CropCycleCount.getValue() + 1, this);
    } else if (iDoSow.getValue()) {
        resetStates();
        EmergenceDOY.setDefaultValue();
        AnthesisDOY.setDefaultValue();
        MilkripenessDOY.setDefaultValue();
        MaturityDOY.setDefaultValue();
        SowingDate.setValue(tCurrentDate, this);
        SowingDOY.setValue(tCurrentDOY, this);
        IsSowing.setValue(true, this);
    } else if (SowingDate.getValue() != null) {
        if (EmergenceDate.getValue() == null &amp;&amp; (SowingDate.getValue().isBefore(tCurrentDate) || SowingDate.getValue().isEqual(tCurrentDate))) {
            sDevStage.setValue(0.0001, this);
        }
        if (AnthesisDate.getValue() == null) {
            sTSUM.setValue(sTSUM.getValue() + iRTEFFAnt.getValue(), this);
            RTEFF.setValue(iRTEFFAnt.getValue(), this);
            double devstagebefore = sDevStage.getValue();
            sDevStage.setValue(max(sTSUM.getValue() / cAirTemperatureSumAnthesis.getValue(), sDevStage.getValue()), this);
            rDevStageRate.setValue(sDevStage.getValue() - devstagebefore, this);
        } else {
            sTSUM.setValue(sTSUM.getValue() + iRTEFFMat.getValue(), this);
            RTEFF.setValue(iRTEFFMat.getValue(), this);
            sDevStage.setValue(1 + (sTSUM.getValue() - cAirTemperatureSumAnthesis.getValue()) / (cAirTemperatureSumMaturity.getValue() - cAirTemperatureSumAnthesis.getValue()), this);
            rDevStageRate.setValue(RTEFF.getValue() / (cAirTemperatureSumMaturity.getValue() - cAirTemperatureSumAnthesis.getValue()), this);
        }
        if (EmergenceDate.getValue() == null &amp;&amp; (SowingDate.getValue().plusDays(cRelativeDayOfEmergence.getValue()).isBefore(tCurrentDate) || SowingDate.getValue().plusDays(cRelativeDayOfEmergence.getValue()).isEqual(tCurrentDate))) {
            EmergenceDate.setValue(tCurrentDate, this);
            EmergenceDOY.setValue(tCurrentDOY, this);
            IsEmergence.setValue(true, this);
        }
        if (AnthesisDate.getValue() == null &amp;&amp; sTSUM.getValue() &gt;= cAirTemperatureSumAnthesis.getValue()) {
            AnthesisDate.setValue(tCurrentDate, this);
            AnthesisDOY.setValue(tCurrentDOY, this);
            IsAnthesis.setValue(true, this);
        }
        if (MilkripenessDate.getValue() == null &amp;&amp; cAirTemperatureSumMilkripeness.getValue() != null &amp;&amp; sTSUM.getValue() &gt;= cAirTemperatureSumMilkripeness.getValue()) {
            MilkripenessDate.setValue(tCurrentDate, this);
            MilkripenessDOY.setValue(tCurrentDOY, this);
            IsMilkripeness.setValue(true, this);
        }
        if (MaturityDate.getValue() == null &amp;&amp; sTSUM.getValue() &gt;= cAirTemperatureSumMaturity.getValue()) {
            MaturityDate.setValue(tCurrentDate, this);
            MaturityDOY.setValue(tCurrentDOY, this);
            IsMaturity.setValue(true, this);
        }
    }
    IsPhenologyEvent.setValue(IsSowing.getValue() || IsEmergence.getValue() || IsAnthesis.getValue() || IsMilkripeness.getValue() || IsMaturity.getValue(), this);
    
    
    """
    
        ]]>
    
    </Algorithm>

  </ModelUnit>
 